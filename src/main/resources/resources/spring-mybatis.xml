<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                     	http://www.springframework.org/schema/tx/spring-tx.xsd">
 	
 	<!-- 引入properties文件，将数据库连接相关配置放到该文件中 -->
 	<context:property-placeholder location="classpath:resources/params_sql.properties" />
 	
 	<!-- 配置连接池：dbcp2 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
        destroy-method="close">
     <property name="driverClassName" value="${ci_driverClassName}" />
     <property name="url" value="${ci_url}" />
     <property name="username" value="${ci_username}" />
     <property name="password" value="${ci_password}" />
     <property name="initialSize" value="10" />
     <property name="maxTotal" value="100" />
     <property name="maxIdle" value="100" />
     <!-- 等待时长，-1表示无限等待 -->
     <property name="maxWaitMillis" value="-1" />
	</bean>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的核心配置文件：可以不用 -->
		<property name="configLocation" value="classpath:resources/mybatis-config.xml"></property>
		<!-- 给MyBatis配置连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapper.xml文件 （如果mapper.xml和dao接口在同一包中，可以不配置）-->
		<!-- <property name="mapperLocations" value="classpath:org/hydrakyoufeng/springmvc/*/*.xml"></property> -->
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描的dao路径，可以使用*通配符，扫描进IOC容器里面，其id是接口名的首字母小写 -->
		<property name="basePackage" value="org.ssm.ci.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
  
  
  <!-- 配置spring的事务管理器，名字为默认值     --> 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
		<property name="dataSource" ref="dataSource" />  
	</bean> 
 
	<!-- 以下是aop事务部分 -->
	<!-- 配置切点和切面 -->
	<aop:config>  
     <aop:pointcut id="myPoint1" expression="execution(* org.ssm.ci.*.*Service.*(..))" />
    	<!-- 将切入点和通知连接起来 -->
     <aop:advisor advice-ref="txAdvice" pointcut-ref="myPoint1" order="10" />  
  </aop:config>
    
  <!-- 配置中方法的事务细则  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager"> 
      <tx:attributes>  
	  <!--配置方法的具体细则，propagation是Spring的事务传递级别，isolation：事务隔离级别,这是数据库的级别 -->
	      <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>  
				<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
				<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>   
	      <tx:method name="query*" propagation="REQUIRED" read-only="true" />   
      </tx:attributes>   
  </tx:advice>
  
   <!-- 开启事务控制的注解支持  --> 
   <tx:annotation-driven transaction-manager="transactionManager"/> 
</beans>